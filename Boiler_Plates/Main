def main():
    parser= argparse.ArgumentParser()
    parser.add_argument("query_text", type=str, help="The Query text")
    args = parser.parse_args()
    query_text = args.query_text

    embedding_function = OpenAIEmbeddings()
    db = Chroma(persist_directory=CHROMA_PATH, embedding_function=embedding_function)

    results = db.similarity_search(query_text, k=3)
    if len(results) == 0 or results[0][1] < 0.7:
        print("No relevant results found.")
        return

    context_text = "\n\n---\n\n".join([doc.page_content for doc in results])
    prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
    prompt = prompt_template.format(context=context_text, question=query_text)    

    model = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0)
    response = model.predict(prompt)

    sources = [doc.metadata.get("source", None) for doc, _score in results]
    formatted_response = f"Response: {response}\nSources: {sources}"
    print(formatted_response)
